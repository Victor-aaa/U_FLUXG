//============================= AD9833 =========================================
// ----------------- Register definition ----------------
#define	CTRL_reg	0x0000	// Control bits
#define	FREQ0_reg	0x4000	// L/H 14 bits of frequency0
#define	FREQ1_reg	0x8000	// L/H 14 bits of frequency1 
#define	PHASE0_reg	0xC000	// 12 bits of phase0 
#define	PHASE1_reg	0xE000	// 12 bits of phase1
//-------------------------------------------------------

// ---------  Bits in the Control Register --------------
MODE__CTRL    = 0x0002	// This bit is used in association with OPBITEN (D5). The function of this bit is to control what is output at the VOUT pin when the on-chip DAC is connected to VOUT. This bit should be set to 0 if the control bit OPBITEN = 1. This is explained further in Table 15. When mode = 1, the SIN ROM is bypassed, resulting in a triangle output from the DAC. When mode = 0,the SIN ROM is used to convert the phase information into amplitude information, which results in a sinusoidal signal at the output.
DIV2__CTRL    = 0x0008	// DIV2 is used in association with D5 (OPBITEN). This is explained further in Table 15. When DIV2 = 1, the MSB of the DAC data is passed directly to the VOUT pin. When DIV2 = 0, the MSB/2 of the DAC data is output at the VOUT pin. 
OPBITEN__CTRL =	0x0020	// The function of this bit, in association with D1 (mode), is to control what is output at the VOUT pin. This is explained further in Table 15. When OPBITEN = 1, the output of the DAC is no longer available at the VOUT pin. Instead, the MSB (or MSB/2) of the DAC data is connected to the VOUT pin. This is useful as a coarse clock source. The DIV2 bit controls whether it is the MSB or MSB/2 that is output. When OPBITEN = 0, the DAC is connected to VOUT. The mode bit determines whether it is a sinusoidal or a ramp output that is available. 
SLEEP1__CTRL  = 0x0040	// When SLEEP1 = 1, the internal MCLK clock is disabled, and the DAC output remains at its present value because the NCO is no longer accumulating. When SLEEP1 = 0, MCLK is enabled. This function is explained further in Table 14.
SLEEP12__CTRL =	0x0080	// SLEEP12 = 1 powers down the on-chip DAC. This is useful when the AD9833 is used to output the MSB of the DAC data.SLEEP12 = 0 implies that the DAC is active. This function is explained further in Table 14.
RESET__CTRL   = 0x0100	// Reset=1 resets internal registers to 0, which corresponds to an analog output of midscale. Reset = 0 disables reset.
PSEL__CTRL    = 0x0400	// The PSELECT bit defines whether the PHASE0 register or the PHASE
FSEL__CTRL    = 0x0800	// The FSELECT bit defines whether the FREQ0 register or the FREQ
HLB__CTRL     = 0x1000	// 
B28__CTRL     = 0x2000	// B28=1, two consecutive writes.  B28=0, one containing the 14 MSBs and the other containing the 14 LSBs.
#define	MASK_DATA12	0x0FFF	// DATA MASK 12bit
#define	MASK_DATA14	0x3FFF	// DATA MASK 14bit
//-------------------------------------------------------
//#define __FREQ_RESOLUTION_1Hz__
  #ifdef __FREQ_RESOLUTION_1Hz__
#define	CNST24MHZ	733008	// 2^28/24000000Hz
  #else
#define	CNST24MHZ	(733008/10)	// 2^28/24000000Hz
  #endif
// =======================================================
M_DDS_SPI_TX 		MACRO   _Reg1
			LOCAL	_wait
        		mov.b   _Reg1, &DDS_SPI_TXBUF
         _wait:         bit.b   #DDS_SPI_BUSY_B
        		jnz     _wait
	  		ENDM
// =======================================================
/*DDS_SPI		// DDS 
	swpb	R12
	M_DDS_SPI_TX
	swpb	R12
	M_DDS_SPI_TX
        ret  */
// =======================================================
// =======================================================
Init_AD9833
InitDDS		// DS init 
		mov	#B28__CTRL|RESET__CTRL, R12	// Control bits reset
		call	#Set_CTRL			// R12  ctrl
  #ifdef __FREQ_RESOLUTION_1Hz__
		  mov	#400 , R12			// 400Hz
		  mov	#0, R13
  #else
		  mov	#4015 , R12			// 401.5Hz
		  mov	#0, R13
  #endif
		  call	#Set_FREQ_DDS	// R13.R12 - freq => R12,R13 14bit reg to AD9833
		  mov	#0x0000, R12			// phase 0
		  call	#Set_PHASE			// R12  phase
		  mov	#B28__CTRL, R12			// Control bits Go..
		call	#Set_CTRL			// DDS 
		ret
// =======================================================
Set_FREQ_DDS		// R13.R12 - freq
		mov	R12, &cur_Freq+0
		mov	R13, &cur_Freq+2		// store current freq
Freq2reg		// R13.R12 - freq => R12,R13 14bit reg to AD9833
	     push	SR
	     dint
	     nop
		mov	R12, &MPY32L
		mov	R13, &MPY32H
		mov 	#LWRD CNST24MHZ, &OP2L 	// for 24MHz !!!
		mov	#HWRD CNST24MHZ, &OP2H 	// for 24MHz !!! 
                mov	&RES1, R12
                mov	&RES2, R13
	     pop	SR	
		rla	R12
		rlc	R13
		rla	R12
		rlc	R13
		
		clrc
		rrc	R12
		rra	R12
	//	ret
// =======================================================
Set_FREQ0	// R12, R13 frequency
		and	#MASK_DATA14, R12
		bis	#FREQ0_reg, R12
		and	#MASK_DATA14, R13
		bis	#FREQ0_reg, R13
		
			push	R12
			mov	#B28__CTRL, R12	// Control bits 
			call	#Set_CTRL	// R12  ctrl
			pop	R12
		
	     push	SR
	     dint
		bic.b	#DDS_CS_B
		swpb	R12
		M_DDS_SPI_TX R12
		swpb	R12
		M_DDS_SPI_TX R12
		swpb	R13
		M_DDS_SPI_TX R13
		swpb	R13
		M_DDS_SPI_TX R13
		bis.b	#DDS_CS_B
	     pop	SR	
		ret
// =============
Set_PHASE	// R12  phase
		and	#MASK_DATA12, R12
		bis	#PHASE0_reg, R12
// =============
Set_CTRL	// R12  ctrl
		bic.b	#DDS_CS_B
		swpb	R12
		M_DDS_SPI_TX R12
		swpb	R12
		M_DDS_SPI_TX R12
		bis.b	#DDS_CS_B
		ret
// =======================================================
// =======================================================
